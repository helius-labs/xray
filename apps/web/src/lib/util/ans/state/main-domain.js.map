{"version":3,"file":"main-domain.js","sourceRoot":"","sources":["../../../src/state/main-domain.ts"],"names":[],"mappings":"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","sourcesContent":["import * as web3 from '@solana/web3.js';\nimport * as beetSolana from '@metaplex-foundation/beet-solana';\nimport * as beet from '@metaplex-foundation/beet';\n\n/**\n * Arguments used to create {@link MainDomain}\n * @category Accounts\n * @category generated\n */\nexport type MainDomainArgs = {\n    nameAccount: web3.PublicKey;\n    tld: string;\n    domain: string;\n};\n\nexport const mainDomainDiscriminator = [109, 239, 227, 199, 98, 226, 66, 175];\n/**\n * Holds the data for the {@link MainDomain} Account and provides de/serialization\n * functionality for that data\n *\n * @category Accounts\n * @category generated\n */\nexport class MainDomain implements MainDomainArgs {\n    private constructor(\n        readonly nameAccount: web3.PublicKey,\n        readonly tld: string,\n        readonly domain: string,\n    ) {}\n\n    /**\n     * Creates a {@link MainDomain} instance from the provided args.\n     */\n    static fromArgs(args: MainDomainArgs) {\n        return new MainDomain(args.nameAccount, args.tld, args.domain);\n    }\n\n    /**\n     * Deserializes the {@link MainDomain} from the data of the provided {@link web3.AccountInfo}.\n     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n     */\n    static fromAccountInfo(\n        accountInfo: web3.AccountInfo<Buffer>,\n        offset = 0,\n    ): [MainDomain, number] {\n        return MainDomain.deserialize(accountInfo.data, offset);\n    }\n\n    /**\n     * Retrieves the account info from the provided address and deserializes\n     * the {@link MainDomain} from its data.\n     *\n     * @throws Error if no account info is found at the address or if deserialization fails\n     */\n    static async fromAccountAddress(\n        connection: web3.Connection,\n        address: web3.PublicKey,\n        commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,\n    ): Promise<MainDomain> {\n        const accountInfo = await connection.getAccountInfo(\n            address,\n            commitmentOrConfig,\n        );\n        if (accountInfo == null) {\n            throw new Error(`Unable to find MainDomain account at ${address}`);\n        }\n        return MainDomain.fromAccountInfo(accountInfo, 0)[0];\n    }\n\n    /**\n     * Provides a {@link web3.Connection.getProgramAccounts} config builder,\n     * to fetch accounts matching filters that can be specified via that builder.\n     *\n     * @param programId - the program that owns the accounts we are filtering\n     */\n    static gpaBuilder(\n        programId: web3.PublicKey = new web3.PublicKey(\n            'TLDHkysf5pCnKsVA4gXpNvmy7psXLPEu4LAdDJthT9S',\n        ),\n    ) {\n        return beetSolana.GpaBuilder.fromStruct(programId, mainDomainBeet);\n    }\n\n    /**\n     * Deserializes the {@link MainDomain} from the provided data Buffer.\n     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n     */\n    static deserialize(buf: Buffer, offset = 0): [MainDomain, number] {\n        return mainDomainBeet.deserialize(buf, offset);\n    }\n\n    /**\n     * Serializes the {@link MainDomain} into a Buffer.\n     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\n     */\n    serialize(): [Buffer, number] {\n        return mainDomainBeet.serialize({\n            accountDiscriminator: mainDomainDiscriminator,\n            ...this,\n        });\n    }\n\n    /**\n     * Returns the byteSize of a {@link Buffer} holding the serialized data of\n     * {@link MainDomain} for the provided args.\n     *\n     * @param args need to be provided since the byte size for this account\n     * depends on them\n     */\n    static byteSize(args: MainDomainArgs) {\n        const instance = MainDomain.fromArgs(args);\n        return mainDomainBeet.toFixedFromValue({\n            accountDiscriminator: mainDomainDiscriminator,\n            ...instance,\n        }).byteSize;\n    }\n\n    /**\n     * Fetches the minimum balance needed to exempt an account holding\n     * {@link MainDomain} data from rent\n     *\n     * @param args need to be provided since the byte size for this account\n     * depends on them\n     * @param connection used to retrieve the rent exemption information\n     */\n    static async getMinimumBalanceForRentExemption(\n        args: MainDomainArgs,\n        connection: web3.Connection,\n        commitment?: web3.Commitment,\n    ): Promise<number> {\n        return connection.getMinimumBalanceForRentExemption(\n            MainDomain.byteSize(args),\n            commitment,\n        );\n    }\n\n    /**\n     * Returns a readable version of {@link MainDomain} properties\n     * and can be used to convert to JSON and/or logging\n     */\n    pretty() {\n        return {\n            nameAccount: this.nameAccount.toBase58(),\n            tld: this.tld,\n            domain: this.domain,\n        };\n    }\n}\n\n/**\n * @category Accounts\n * @category generated\n */\nexport const mainDomainBeet = new beet.FixableBeetStruct<\n    MainDomain,\n    MainDomainArgs & {\n        accountDiscriminator: number[] /* size: 8 */;\n    }\n>(\n    [\n        ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\n        ['nameAccount', beetSolana.publicKey],\n        ['tld', beet.utf8String],\n        ['domain', beet.utf8String],\n    ],\n    MainDomain.fromArgs,\n    'MainDomain',\n);\n"]}