{"version":3,"file":"name-record-header.js","sourceRoot":"","sources":["../../../src/state/name-record-header.ts"],"names":[],"mappings":"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","sourcesContent":["import {AccountInfo, Connection, PublicKey} from '@solana/web3.js';\nimport {BinaryReader, deserializeUnchecked, Schema} from 'borsh';\n\n/**\n * Holds the data for the {@link NameRecordHeader} Account and provides de/serialization\n * functionality for that data\n */\nexport class NameRecordHeader {\n    constructor(obj: {\n        parentName: Uint8Array;\n        owner: Uint8Array;\n        nclass: Uint8Array;\n        expiresAt: Uint8Array;\n    }) {\n        this.parentName = new PublicKey(obj.parentName);\n        this.nclass = new PublicKey(obj.nclass);\n        this.expiresAt = new Date(\n            new BinaryReader(Buffer.from(obj.expiresAt)).readU64().toNumber() *\n                1000,\n        );\n        this.isValid =\n            new BinaryReader(Buffer.from(obj.expiresAt))\n                .readU64()\n                .toNumber() === 0\n                ? true\n                : this.expiresAt > new Date();\n        this.owner = this.isValid ? new PublicKey(obj.owner) : undefined;\n    }\n\n    parentName: PublicKey;\n    owner: PublicKey | undefined;\n    nclass: PublicKey;\n    expiresAt: Date;\n    isValid: boolean;\n    data: Buffer | undefined;\n\n    static DISCRIMINATOR = [68, 72, 88, 44, 15, 167, 103, 243];\n    static HASH_PREFIX = 'ALT Name Service';\n\n    /**\n     * NameRecordHeader Schema across all alt name service accounts\n     */\n    static schema: Schema = new Map([\n        [\n            NameRecordHeader,\n            {\n                kind: 'struct',\n                fields: [\n                    ['discriminator', [8]],\n                    ['parentName', [32]],\n                    ['owner', [32]],\n                    ['nclass', [32]],\n                    ['expiresAt', [8]],\n                    ['padding', [88]],\n                ],\n            },\n        ],\n    ]);\n\n    /**\n     * Returns the minimum size of a {@link Buffer} holding the serialized data of\n     * {@link NameRecordHeader}\n     */\n    static get byteSize() {\n        return 8 + 32 + 32 + 32 + 8 + 88;\n    }\n\n    /**\n     * Retrieves the account info from the provided address and deserializes\n     * the {@link NameRecordHeader} from its data.\n     */\n    public static async fromAccountAddress(\n        connection: Connection,\n        nameAccountKey: PublicKey,\n    ): Promise<NameRecordHeader | undefined> {\n        const nameAccount = await connection.getAccountInfo(\n            nameAccountKey,\n            'confirmed',\n        );\n        if (!nameAccount) {\n            return undefined;\n        }\n\n        const res: NameRecordHeader = deserializeUnchecked(\n            this.schema,\n            NameRecordHeader,\n            nameAccount.data,\n        );\n\n        res.data = nameAccount.data?.subarray(this.byteSize);\n\n        return res;\n    }\n\n    /**\n     * Retrieves the account infos from the multiple name accounts\n     * the {@link NameRecordHeader} from its data.\n     */\n    public static async fromMultipileAccountAddresses(\n        connection: Connection,\n        nameAccountKey: PublicKey[],\n    ): Promise<NameRecordHeader[] | []> {\n        let nameRecordAccountInfos = await connection.getMultipleAccountsInfo(\n            nameAccountKey,\n        );\n\n        let nameRecords: NameRecordHeader[] = [];\n\n        nameRecordAccountInfos.forEach(value => {\n            if (!value) {\n                nameRecords.push(undefined);\n                return;\n            }\n            let nameRecordData = this.fromAccountInfo(value);\n            if (!nameRecordData) {\n                nameRecords.push(undefined);\n                return;\n            }\n            nameRecords.push(nameRecordData);\n        });\n\n        return nameRecords;\n    }\n\n    /**\n     * Retrieves the account info from the provided data and deserializes\n     * the {@link NameRecordHeader} from its data.\n     */\n    public static fromAccountInfo(\n        nameAccountAccountInfo: AccountInfo<Buffer>,\n    ): NameRecordHeader {\n        const res: NameRecordHeader = deserializeUnchecked(\n            this.schema,\n            NameRecordHeader,\n            nameAccountAccountInfo.data,\n        );\n        res.data = nameAccountAccountInfo.data?.subarray(this.byteSize);\n        return res;\n    }\n\n    /**\n     * Returns a readable version of {@link NameRecordHeader} properties\n     * and can be used to convert to JSON and/or logging\n     */\n    pretty() {\n        const indexOf0 = this.data.indexOf(0x00);\n        return {\n            parentName: this.parentName.toBase58(),\n            owner: this.owner?.toBase58(),\n            nclass: this.nclass.toBase58(),\n            expiresAt: this.expiresAt,\n            isValid: this.isValid,\n            data: this.isValid\n                ? this.data.subarray(0, indexOf0).toString()\n                : undefined,\n        };\n    }\n}\n"]}