{"version":3,"file":"parsers.js","sourceRoot":"","sources":["../../src/parsers.ts"],"names":[],"mappings":"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","sourcesContent":["import {MainDomain} from './state/main-domain';\nimport {PublicKey, Connection} from '@solana/web3.js';\nimport {BN} from 'bn.js';\nimport {NameRecordHeader} from './state/name-record-header';\nimport {\n    findMainDomain,\n    findOwnedNameAccountsForUser,\n    getHashedName,\n    getNameAccountKeyWithBump,\n    getNameOwner,\n    getOriginNameAccountKey,\n} from './utils';\n\nexport class TldParser {\n    constructor(private readonly connection: Connection) {}\n\n    /**\n     * retrieves all nameAccounts for any user.\n     *\n     * @param userAccount user publickey or string\n     */\n    async getAllUserDomains(\n        userAccount: PublicKey | string,\n    ): Promise<PublicKey[]> {\n        if (typeof userAccount == 'string') {\n            userAccount = new PublicKey(userAccount);\n        }\n        const allDomains = await findOwnedNameAccountsForUser(\n            this.connection,\n            userAccount,\n            undefined,\n        );\n        return allDomains;\n    }\n\n    /**\n     * retrieves all nameaccounts for any user in a particular tld.\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    async getAllUserDomainsFromTld(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<PublicKey[]> {\n        const tldName = '.' + tld;\n\n        const nameOriginTldKey = await getOriginNameAccountKey();\n        const parentHashedName = getHashedName(tldName);\n        const [parentAccountKey] = getNameAccountKeyWithBump(\n            parentHashedName,\n            undefined,\n            nameOriginTldKey,\n        );\n        if (typeof userAccount == 'string') {\n            userAccount = new PublicKey(userAccount);\n        }\n        const allDomains = await findOwnedNameAccountsForUser(\n            this.connection,\n            userAccount,\n            parentAccountKey,\n        );\n        return allDomains;\n    }\n\n    /**\n     * retrieves owner of a particular Name Account from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    async getOwnerFromDomainTld(\n        domainTld: string,\n    ): Promise<PublicKey | undefined> {\n        const domainTldSplit = domainTld.split('.');\n        const domain = domainTldSplit[0];\n        const tldName = '.' + domainTldSplit[1];\n\n        const nameOriginTldKey = await getOriginNameAccountKey();\n        const parentHashedName = getHashedName(tldName);\n        const [parentAccountKey] = getNameAccountKeyWithBump(\n            parentHashedName,\n            undefined,\n            nameOriginTldKey,\n        );\n\n        const domainHashedName = getHashedName(domain);\n        const [domainAccountKey] = getNameAccountKeyWithBump(\n            domainHashedName,\n            undefined,\n            parentAccountKey,\n        );\n\n        const nameOwner = await getNameOwner(this.connection, domainAccountKey);\n        return nameOwner;\n    }\n\n    /**\n     * retrieves domainTld data a domain from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    async getNameRecordFromDomainTld(\n        domainTld: string,\n    ): Promise<NameRecordHeader | undefined> {\n        const domainTldSplit = domainTld.split('.');\n        const domain = domainTldSplit[0];\n        const tldName = '.' + domainTldSplit[1];\n\n        const nameOriginTldKey = await getOriginNameAccountKey();\n        const parentHashedName = getHashedName(tldName);\n        const [parentAccountKey] = getNameAccountKeyWithBump(\n            parentHashedName,\n            undefined,\n            nameOriginTldKey,\n        );\n\n        const domainHashedName = getHashedName(domain);\n        const [domainAccountKey] = getNameAccountKeyWithBump(\n            domainHashedName,\n            undefined,\n            parentAccountKey,\n        );\n        const nameRecord = await NameRecordHeader.fromAccountAddress(\n            this.connection,\n            domainAccountKey,\n        );\n        return nameRecord;\n    }\n\n    /**\n     * retrieves tld from parent name via TldHouse account.\n     *\n     * @param parentAccount parent publickey or string\n     */\n    async getTldFromParentAccount(\n        parentAccount: PublicKey | string,\n    ): Promise<string> {\n        if (typeof parentAccount == 'string') {\n            parentAccount = new PublicKey(parentAccount);\n        }\n        const parentNameAccount = await NameRecordHeader.fromAccountAddress(\n            this.connection,\n            parentAccount,\n        );\n\n        const tldHouseData = await this.connection.getAccountInfo(\n            parentNameAccount?.owner!,\n        );\n        const tldStart = 8 + 32 + 32 + 32;\n        const tldBuffer = tldHouseData?.data?.subarray(tldStart);\n        const nameLength = new BN(tldBuffer?.subarray(0, 4), 'le').toNumber();\n        const tld = tldBuffer\n            .subarray(4, 4 + nameLength)\n            .toString()\n            .replace(/\\0.*$/g, '');\n        return tld;\n    }\n    /**\n     * retrieves domain from name account via tldParent account.\n     *\n     * @param nameAccount name publickey or string\n     * @param parentAccountOwner parent Owner or string (TldHouse)\n     */\n    async reverseLookupNameAccount(\n        nameAccount: PublicKey | string,\n        parentAccountOwner: PublicKey | string,\n    ): Promise<string> {\n        if (typeof nameAccount == 'string') {\n            nameAccount = new PublicKey(nameAccount);\n        }\n        if (typeof parentAccountOwner == 'string') {\n            parentAccountOwner = new PublicKey(parentAccountOwner);\n        }\n\n        const reverseLookupHashedName = getHashedName(nameAccount.toString());\n        const [reverseLookupAccount] = getNameAccountKeyWithBump(\n            reverseLookupHashedName,\n            parentAccountOwner,\n            undefined,\n        );\n\n        const reverseLookUpResult = await NameRecordHeader.fromAccountAddress(\n            this.connection,\n            reverseLookupAccount,\n        );\n        const domain = reverseLookUpResult?.data?.toString();\n        return domain;\n    }\n    /**\n     * retrieves main domain name account and its domain tld from user address.\n     *\n     * @param userAddress user publickey or string\n     */\n    async getMainDomain(userAddress: PublicKey | string): Promise<MainDomain> {\n        if (typeof userAddress == 'string') {\n            userAddress = new PublicKey(userAddress);\n        }\n\n        const [mainDomainAddress] = findMainDomain(userAddress);\n        const mainDomain = await MainDomain.fromAccountAddress(\n            this.connection,\n            mainDomainAddress,\n        );\n        return mainDomain;\n    }\n}\n"]}